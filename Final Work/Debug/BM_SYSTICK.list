
BM_SYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00001374  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00001374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  08000374  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0000136c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000370  08000370  00001370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000374  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000374  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000285  00000000  00000000  0000139d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000010a  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff54  00000000  00000000  000017b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000064b  00000000  00000000  00011707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005454b  00000000  00000000  00011d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006629d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  000662e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00066358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000354 	.word	0x08000354

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000354 	.word	0x08000354

08000170 <SysTick_Handler>:
/*
 * SysTick_Handler interrupt handler
 */
int SysTick_TASK = 0;
void SysTick_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// Do stuff
	SysTick_TASK = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <SysTick_Handler+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000001c 	.word	0x2000001c

08000188 <main>:

int main(void)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
	// Set Bit 4 to enable GPIOC clock
	RCC->APB2ENR |= (1 << 4);
 800018e:	4b45      	ldr	r3, [pc, #276]	@ (80002a4 <main+0x11c>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a44      	ldr	r2, [pc, #272]	@ (80002a4 <main+0x11c>)
 8000194:	f043 0310 	orr.w	r3, r3, #16
 8000198:	6193      	str	r3, [r2, #24]

    // Configura os pinos PC13, PC14, PC15 como saÃ­da push-pull
	GPIOC->CRH &= ~((0xF << 20) | (0xF << 24) | (0xF << 28));
 800019a:	4b43      	ldr	r3, [pc, #268]	@ (80002a8 <main+0x120>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	4a42      	ldr	r2, [pc, #264]	@ (80002a8 <main+0x120>)
 80001a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80001a4:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (0x2 << 20) | (0x2 << 24) | (0x2 << 28);
 80001a6:	4b40      	ldr	r3, [pc, #256]	@ (80002a8 <main+0x120>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	4a3f      	ldr	r2, [pc, #252]	@ (80002a8 <main+0x120>)
 80001ac:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 80001b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001b4:	6053      	str	r3, [r2, #4]

	// Reset GPIOC Pin13, 14, 15
	GPIOC->ODR &= ~((1 << 13) | (1 << 14) | (1 << 15));
 80001b6:	4b3c      	ldr	r3, [pc, #240]	@ (80002a8 <main+0x120>)
 80001b8:	68db      	ldr	r3, [r3, #12]
 80001ba:	4a3b      	ldr	r2, [pc, #236]	@ (80002a8 <main+0x120>)
 80001bc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80001c0:	60d3      	str	r3, [r2, #12]

	/*System Tick Configuration
	 * Initializes the System Timer and its interrupt, and starts the System Tick Timer.
     * Counter is in free running mode to generate periodic interrupts.
	 */
	uint32_t ticks = 1000000; //ticks  Number of ticks between two interrupts, should be less than 0xFFFFFFUL = 16777216  (24bits)
 80001c2:	4b3a      	ldr	r3, [pc, #232]	@ (80002ac <main+0x124>)
 80001c4:	603b      	str	r3, [r7, #0]
	if ((ticks - 1UL) <= 0xFFFFFFUL){
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	3b01      	subs	r3, #1
 80001ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80001ce:	d209      	bcs.n	80001e4 <main+0x5c>
		 /* set reload register */
		SysTick->LOAD  = (uint32_t)(ticks - 1UL);
 80001d0:	4a37      	ldr	r2, [pc, #220]	@ (80002b0 <main+0x128>)
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	3b01      	subs	r3, #1
 80001d6:	6053      	str	r3, [r2, #4]

		/* set Priority for Systick Interrupt */
		//NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL);

		SysTick->VAL   = 0UL;			/* Load the SysTick Counter Value */
 80001d8:	4b35      	ldr	r3, [pc, #212]	@ (80002b0 <main+0x128>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]

		SysTick->CTRL  = (0 << 2) |		/* 0 -> SysTick_Clock = AHB/8 */
 80001de:	4b34      	ldr	r3, [pc, #208]	@ (80002b0 <main+0x128>)
 80001e0:	2203      	movs	r2, #3
 80001e2:	601a      	str	r2, [r3, #0]
						 (1 << 1) |	 	/* Enable SysTick IRQ and SysTick Timer */
						 (1 << 0);
	}

	int count = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
	while(1){
		if (SysTick_TASK){
 80001e8:	4b32      	ldr	r3, [pc, #200]	@ (80002b4 <main+0x12c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0fb      	beq.n	80001e8 <main+0x60>
			GPIOC->ODR &= ~((1 << 13) | (1 << 14) | (1 << 15));
 80001f0:	4b2d      	ldr	r3, [pc, #180]	@ (80002a8 <main+0x120>)
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	4a2c      	ldr	r2, [pc, #176]	@ (80002a8 <main+0x120>)
 80001f6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80001fa:	60d3      	str	r3, [r2, #12]
			SysTick_TASK = 0;
 80001fc:	4b2d      	ldr	r3, [pc, #180]	@ (80002b4 <main+0x12c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
			switch (count){
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2b07      	cmp	r3, #7
 8000206:	d843      	bhi.n	8000290 <main+0x108>
 8000208:	a201      	add	r2, pc, #4	@ (adr r2, 8000210 <main+0x88>)
 800020a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020e:	bf00      	nop
 8000210:	08000291 	.word	0x08000291
 8000214:	08000231 	.word	0x08000231
 8000218:	0800023f 	.word	0x0800023f
 800021c:	0800024d 	.word	0x0800024d
 8000220:	0800025b 	.word	0x0800025b
 8000224:	08000269 	.word	0x08000269
 8000228:	08000277 	.word	0x08000277
 800022c:	08000285 	.word	0x08000285
				case 0:
					break;
				case 1:
					GPIOC->ODR ^= (1 << 13);
 8000230:	4b1d      	ldr	r3, [pc, #116]	@ (80002a8 <main+0x120>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a1c      	ldr	r2, [pc, #112]	@ (80002a8 <main+0x120>)
 8000236:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800023a:	60d3      	str	r3, [r2, #12]
					break;
 800023c:	e029      	b.n	8000292 <main+0x10a>
				case 2:
					GPIOC->ODR ^= (1 << 14);
 800023e:	4b1a      	ldr	r3, [pc, #104]	@ (80002a8 <main+0x120>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	4a19      	ldr	r2, [pc, #100]	@ (80002a8 <main+0x120>)
 8000244:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8000248:	60d3      	str	r3, [r2, #12]
					break;
 800024a:	e022      	b.n	8000292 <main+0x10a>
				case 3:
					GPIOC->ODR ^= (1 << 15);
 800024c:	4b16      	ldr	r3, [pc, #88]	@ (80002a8 <main+0x120>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a15      	ldr	r2, [pc, #84]	@ (80002a8 <main+0x120>)
 8000252:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 8000256:	60d3      	str	r3, [r2, #12]
					break;
 8000258:	e01b      	b.n	8000292 <main+0x10a>
				case 4:
					GPIOC->ODR ^= (1 << 13) | (1 << 14);
 800025a:	4b13      	ldr	r3, [pc, #76]	@ (80002a8 <main+0x120>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	4a12      	ldr	r2, [pc, #72]	@ (80002a8 <main+0x120>)
 8000260:	f483 43c0 	eor.w	r3, r3, #24576	@ 0x6000
 8000264:	60d3      	str	r3, [r2, #12]
					break;
 8000266:	e014      	b.n	8000292 <main+0x10a>
				case 5:
					GPIOC->ODR ^= (1 << 14) | (1 << 15);
 8000268:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <main+0x120>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <main+0x120>)
 800026e:	f483 4340 	eor.w	r3, r3, #49152	@ 0xc000
 8000272:	60d3      	str	r3, [r2, #12]
					break;
 8000274:	e00d      	b.n	8000292 <main+0x10a>
				case 6:
					GPIOC->ODR ^= (1 << 13) | (1 << 15);
 8000276:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <main+0x120>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	4a0b      	ldr	r2, [pc, #44]	@ (80002a8 <main+0x120>)
 800027c:	f483 4320 	eor.w	r3, r3, #40960	@ 0xa000
 8000280:	60d3      	str	r3, [r2, #12]
					break;
 8000282:	e006      	b.n	8000292 <main+0x10a>
				case 7:
					GPIOC->ODR ^= (1 << 13) | (1 << 14) | (1 << 15);
 8000284:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <main+0x120>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a07      	ldr	r2, [pc, #28]	@ (80002a8 <main+0x120>)
 800028a:	f483 4360 	eor.w	r3, r3, #57344	@ 0xe000
 800028e:	60d3      	str	r3, [r2, #12]
				default:
					break;
 8000290:	bf00      	nop
			}
			count++;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3301      	adds	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
			if (count > 7){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b07      	cmp	r3, #7
 800029c:	dda4      	ble.n	80001e8 <main+0x60>
				count = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
		if (SysTick_TASK){
 80002a2:	e7a1      	b.n	80001e8 <main+0x60>
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40011000 	.word	0x40011000
 80002ac:	000f4240 	.word	0x000f4240
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	@ (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	@ (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff4d 	bl	8000188 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	20000020 	.word	0x20000020

08000308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC1_2_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	2600      	movs	r6, #0
 8000310:	4d0c      	ldr	r5, [pc, #48]	@ (8000344 <__libc_init_array+0x38>)
 8000312:	4c0d      	ldr	r4, [pc, #52]	@ (8000348 <__libc_init_array+0x3c>)
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	f000 f81a 	bl	8000354 <_init>
 8000320:	2600      	movs	r6, #0
 8000322:	4d0a      	ldr	r5, [pc, #40]	@ (800034c <__libc_init_array+0x40>)
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <__libc_init_array+0x44>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
