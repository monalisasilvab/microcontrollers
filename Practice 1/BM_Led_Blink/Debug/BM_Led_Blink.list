
BM_Led_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000308  08000310  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000308  08000308  00001310  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000308  08000308  00001310  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000308  08000310  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000308  08000308  00001308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800030c  0800030c  0000130c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000310  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000310  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001c7  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c9  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000015d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff54  00000000  00000000  00001645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000609  00000000  00000000  00011599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054507  00000000  00000000  00011ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000660a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  000660ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00066140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002f0 	.word	0x080002f0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002f0 	.word	0x080002f0

08000170 <main>:
#include "stm32f1xx.h"

int main(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= (1 << 4); //Enable GPIOC Clock
 8000174:	4b34      	ldr	r3, [pc, #208]	@ (8000248 <main+0xd8>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a33      	ldr	r2, [pc, #204]	@ (8000248 <main+0xd8>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 2); //Enable GPIOA Clock
 8000180:	4b31      	ldr	r3, [pc, #196]	@ (8000248 <main+0xd8>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a30      	ldr	r2, [pc, #192]	@ (8000248 <main+0xd8>)
 8000186:	f043 0304 	orr.w	r3, r3, #4
 800018a:	6193      	str	r3, [r2, #24]

	GPIOC->CRH &= ~((0xF << 20) | (0xF << 24) | (0xF << 28)); //Set C13, C14, C15 as Output
 800018c:	4b2f      	ldr	r3, [pc, #188]	@ (800024c <main+0xdc>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	4a2e      	ldr	r2, [pc, #184]	@ (800024c <main+0xdc>)
 8000192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000196:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (0x2 << 20) | (0x2 << 24) | (0x2 << 28);
 8000198:	4b2c      	ldr	r3, [pc, #176]	@ (800024c <main+0xdc>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a2b      	ldr	r2, [pc, #172]	@ (800024c <main+0xdc>)
 800019e:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 80001a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001a6:	6053      	str	r3, [r2, #4]

	GPIOA->CRL &= ~((0xF << 0) | (0xF << 4) | (0xF << 8)); //Set A0, A1, A2 as Input
 80001a8:	4b29      	ldr	r3, [pc, #164]	@ (8000250 <main+0xe0>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a28      	ldr	r2, [pc, #160]	@ (8000250 <main+0xe0>)
 80001ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80001b2:	f023 030f 	bic.w	r3, r3, #15
 80001b6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0X8 << 0) | (0x8 << 4) | (0x8 << 8);
 80001b8:	4b25      	ldr	r3, [pc, #148]	@ (8000250 <main+0xe0>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a24      	ldr	r2, [pc, #144]	@ (8000250 <main+0xe0>)
 80001be:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 80001c2:	f043 0308 	orr.w	r3, r3, #8
 80001c6:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= (1 << 0) | (1 << 1) | (1 << 2);
 80001c8:	4b21      	ldr	r3, [pc, #132]	@ (8000250 <main+0xe0>)
 80001ca:	68db      	ldr	r3, [r3, #12]
 80001cc:	4a20      	ldr	r2, [pc, #128]	@ (8000250 <main+0xe0>)
 80001ce:	f043 0307 	orr.w	r3, r3, #7
 80001d2:	60d3      	str	r3, [r2, #12]

	while(1){ //Blink LED in Blue-Pill C13, C14, C15 pin
		if ((GPIOA->IDR & (1 << 0)) == 0){
 80001d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000250 <main+0xe0>)
 80001d6:	689b      	ldr	r3, [r3, #8]
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d106      	bne.n	80001ee <main+0x7e>
			GPIOC->ODR |= (1 << 13);
 80001e0:	4b1a      	ldr	r3, [pc, #104]	@ (800024c <main+0xdc>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4a19      	ldr	r2, [pc, #100]	@ (800024c <main+0xdc>)
 80001e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001ea:	60d3      	str	r3, [r2, #12]
 80001ec:	e005      	b.n	80001fa <main+0x8a>
		}else{
			GPIOC->ODR &= ~(1 << 13);
 80001ee:	4b17      	ldr	r3, [pc, #92]	@ (800024c <main+0xdc>)
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	4a16      	ldr	r2, [pc, #88]	@ (800024c <main+0xdc>)
 80001f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80001f8:	60d3      	str	r3, [r2, #12]
		}

		if ((GPIOA->IDR & (1 << 1)) == 0){
 80001fa:	4b15      	ldr	r3, [pc, #84]	@ (8000250 <main+0xe0>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b00      	cmp	r3, #0
 8000204:	d106      	bne.n	8000214 <main+0xa4>
			GPIOC->ODR |= (1 << 14);
 8000206:	4b11      	ldr	r3, [pc, #68]	@ (800024c <main+0xdc>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	4a10      	ldr	r2, [pc, #64]	@ (800024c <main+0xdc>)
 800020c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000210:	60d3      	str	r3, [r2, #12]
 8000212:	e005      	b.n	8000220 <main+0xb0>
		}else{
			GPIOC->ODR &= ~(1 << 14);
 8000214:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <main+0xdc>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a0c      	ldr	r2, [pc, #48]	@ (800024c <main+0xdc>)
 800021a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800021e:	60d3      	str	r3, [r2, #12]
		}

		if ((GPIOA->IDR & (1 << 2)) == 0){
 8000220:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <main+0xe0>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	f003 0304 	and.w	r3, r3, #4
 8000228:	2b00      	cmp	r3, #0
 800022a:	d106      	bne.n	800023a <main+0xca>
			GPIOC->ODR |= (1 << 15);
 800022c:	4b07      	ldr	r3, [pc, #28]	@ (800024c <main+0xdc>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	4a06      	ldr	r2, [pc, #24]	@ (800024c <main+0xdc>)
 8000232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000236:	60d3      	str	r3, [r2, #12]
 8000238:	e7cc      	b.n	80001d4 <main+0x64>
		}else{
			GPIOC->ODR &= ~(1 << 15);
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <main+0xdc>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	4a03      	ldr	r2, [pc, #12]	@ (800024c <main+0xdc>)
 8000240:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000244:	60d3      	str	r3, [r2, #12]
		if ((GPIOA->IDR & (1 << 0)) == 0){
 8000246:	e7c5      	b.n	80001d4 <main+0x64>
 8000248:	40021000 	.word	0x40021000
 800024c:	40011000 	.word	0x40011000
 8000250:	40010800 	.word	0x40010800

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	@ (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	@ (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	@ (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	@ (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 f811 	bl	80002a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ff73 	bl	8000170 <main>

0800028a <LoopForever>:

LoopForever:
  b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000310 	.word	0x08000310
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC1_2_IRQHandler>
	...

080002a8 <__libc_init_array>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	2600      	movs	r6, #0
 80002ac:	4d0c      	ldr	r5, [pc, #48]	@ (80002e0 <__libc_init_array+0x38>)
 80002ae:	4c0d      	ldr	r4, [pc, #52]	@ (80002e4 <__libc_init_array+0x3c>)
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	10a4      	asrs	r4, r4, #2
 80002b4:	42a6      	cmp	r6, r4
 80002b6:	d109      	bne.n	80002cc <__libc_init_array+0x24>
 80002b8:	f000 f81a 	bl	80002f0 <_init>
 80002bc:	2600      	movs	r6, #0
 80002be:	4d0a      	ldr	r5, [pc, #40]	@ (80002e8 <__libc_init_array+0x40>)
 80002c0:	4c0a      	ldr	r4, [pc, #40]	@ (80002ec <__libc_init_array+0x44>)
 80002c2:	1b64      	subs	r4, r4, r5
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	42a6      	cmp	r6, r4
 80002c8:	d105      	bne.n	80002d6 <__libc_init_array+0x2e>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d0:	4798      	blx	r3
 80002d2:	3601      	adds	r6, #1
 80002d4:	e7ee      	b.n	80002b4 <__libc_init_array+0xc>
 80002d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002da:	4798      	blx	r3
 80002dc:	3601      	adds	r6, #1
 80002de:	e7f2      	b.n	80002c6 <__libc_init_array+0x1e>
 80002e0:	08000308 	.word	0x08000308
 80002e4:	08000308 	.word	0x08000308
 80002e8:	08000308 	.word	0x08000308
 80002ec:	0800030c 	.word	0x0800030c

080002f0 <_init>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	bf00      	nop
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr

080002fc <_fini>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr
